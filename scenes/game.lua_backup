local sti = require 'lib.sti'
local camera = require 'lib.camera'
--
local game = {}
--# objects
require 'objects.player'
require 'objects.box'
require 'objects.spike'
require 'objects.portal'
--# new bump world
_G.world = _G.bump.newWorld(32)
--
function game:load()
  self.map_objects = {
    boxes = {},
    spikes = {},
    portals = {},
  } -- hold map objects
  --# test map
  --add ground
  self.map = sti("tilesets/level1.lua", {"bump"})
  self.map:bump_init(_G.world)

  if self.map.layers["obj_ground"] then
    for _, ground in pairs(self.map.layers["obj_ground"].objects) do
      _G.world:add({id = "ground"}, ground.x, ground.y, ground.width, ground.height)
    end
  end
  -- add boxes
  if self.map.layers["obj_box"] then
    for _, box in pairs(self.map.layers["obj_box"].objects) do
      table.insert(self.map_objects.boxes, _G.objects.box(box.x, box.y))
    end
  end
  -- add traps
  if self.map.layers["obj_spike"] then
    for _, spike in pairs(self.map.layers["obj_spike"].objects) do
      --table.insert(self.map_objects.spikes, _G.objects.spike(spike.x, spike.y, spike.width, spike.height, spike.class))
      _G.world:add({id = spike.class}, spike.x, spike.y, spike.width, spike.height)
    end

  -- # init camera
  local cw, ch = _G.push:getWidth(), _G.push:getHeight()
  self.camera = camera(cw/2, ch/2, cw, ch)
  -- camera bounds from map
  local bw, bh = self.map.width * self.map.tilewidth, self.map.height * self.map.tileheight
  self.camera:setBounds(0, 0, bw, bh)
  --
  end

  -- add players
  if self.map.layers["obj_player"] then
    for _, player in pairs(self.map.layers["obj_player"].objects) do
      if player.class == "red" then
        self.player_red = _G.objects.player(player.x, player.y, player.class)
      else
        self.player_blue = _G.objects.player(player.x, player.y, player.class)
      end
    end
  end
  -- add portals
  if self.map.layers["obj_portal"] then
    for _, portal in pairs(self.map.layers["obj_portal"].objects) do
      if portal.name == "red" then
        -- print(portal.name..","..portal.x..","..portal.y..","..portal.width..","..portal.height)
        self.portal_red = _G.objects.portal(portal.x, portal.y, portal.width, portal.height, portal.name)
      else
        self.portal_blue = _G.objects.portal(portal.x, portal.y, portal.width, portal.height, portal.name)
      end
    end
  end

  self.current_player = self.player_red
  self.current_player.active = true
  --
end

function game:update(dt)
  --current_player:update(dt)
  self.player_red:update(dt)
  self.player_blue:update(dt)

  -- update objects
  for _, box in pairs(self.map_objects.boxes) do
    box:update(dt)
  end
  self.portal_red:update(dt)
  self.portal_blue:update(dt)

  -- update camera
  self.camera:update(dt)
  self.camera:follow(self.current_player.x, self.current_player.y)
end

function game:draw()
  -- camera
  self.camera:attach()
  --# draw temp tiled layer
  self.map:drawLayer(self.map.layers['tl_bg'])
  self.map:drawLayer(self.map.layers['tl_ground'])
  self.map:drawLayer(self.map.layers['tl_fg'])

  --# draw other objects
  for _, box in pairs(self.map_objects.boxes) do
    box:draw()
  end
  self.portal_red:draw()
  self.portal_blue:draw()
  --# draw players
    self.player_red:draw()
    self.player_blue:draw()
  --#draw an active marker on top of active player
    love.graphics.rectangle("line", self.current_player.x + 12, self.current_player.y - 8, 6, 6)
  -- detach camera
  self.camera:detach()
  self.camera:draw() -- debug
end

function game:keypressed(key)
  if key == "z" then
    self.current_player.vx = 0 -- to prevent player from moving and pushing
    self.current_player.pushing = false
    self.current_player.active = false
    if self.current_player == self.player_red then
      self.current_player = self.player_blue
      self.current_player.active = true
    else
      self.current_player = self.player_red
      self.current_player.active = true
    end
  end
end

function game:keyreleased(key)
  self.current_player:keyreleased(key)
end

return game

